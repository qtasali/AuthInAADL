package AccessControlResolute
public
	with Security_Attributes;
	with Role;
	with Permission;
	annex resolute {**
	have_assigned_access_category(p : component) <=
  		** " Check threads in component " p **
		forall(t : thread). contained(t, p) => check_thread_for_properties (t)

	check_thread_for_properties(t : thread) <=
  	** "The thread " t " is assigned a an access control category and has correct value"  **
  		(has_property (t, Security_Attributes::Category))  and 
  		(property(t, Security_Attributes::Category) = {"B"})
  	
  	check_authorization(subject: component, object: component) <=
  	** "checking if " subject " is authorized to access " object **
  		(check_permissions(subject) and check_permissions(object)) and 
  		(forall(t1: thread). contained(t1, subject) and forall (t2: thread). contained(t2, object)
  		 	=> check_thread_permissions_match(t1, t2))
    check_authorization_simple(c: component) <=
  	** "checking if access is authorized between source and destination in " c **
  		forall(conn: connections(c)). has_property(source(conn), Permission::permission_set)
  				and has_property(destination(conn), Role::role_hierarchy) =>
  				(property(source(conn), Permission::permission_set) < property(destination(conn), Role::role_hierarchy))
  							 
  	
  	check_permissions(p : component) <=
  	** "Check if permissions are assigned in " p **
  		forall(t: thread). contained(t, p) => check_thread_permissions(t)
  	
  	check_thread_permissions(t: thread) <=
  	** "checking for permission in thread: " t **
  		(has_property (t, Role::role_hierarchy)) or 
  		(has_property(t, Permission::permission_set))
	
	check_thread_permissions_match(t1:thread, t2:thread) <=
	** "checking if permissions in "t1 "match permissions in "t2 **
		property(t1, Role::role_hierarchy) = property(t2, Permission::permission_set)
	 	
**};
end AccessControlResolute;